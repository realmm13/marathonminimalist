generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id
  createdAt               DateTime
  updatedAt               DateTime?               @updatedAt
  name                    String
  email                   String                  @unique
  emailVerified           Boolean
  image                   String?
  bio                     String?
  avatarImageUrl          String?
  coverImageUrl           String?
  avatarImageUTKey        String?
  coverImageUTKey         String?
  avatarImageId           String?                 @unique
  coverImageId            String?                 @unique
  timezone                String?                 @default("Etc/GMT")
  preferences             Json?                   @default("{}")
  role                    String                  @default("user")
  banReason               String?
  banExpires              DateTime?
  banned                  Boolean                 @default(false)
  username                String?                 @unique
  displayUsername         String?
  onboarded               Boolean                 @default(false)
  current5KTime           String?
  experienceLevel         ExperienceLevel         @default(BEGINNER)
  goalMarathonTime        String?
  marathonDate            DateTime?
  accounts                Account[]
  crossTrainingActivities CrossTrainingActivity[]
  sessions                Session[]
  trainingPlans           TrainingPlan[]
  avatarImage             UTImage?                @relation("AvatarImage", fields: [avatarImageId], references: [id])
  coverImage              UTImage?                @relation("CoverImage", fields: [coverImageId], references: [id])
  uploadedImages          UTImage[]               @relation("UploadedImages")
  workoutLogs             WorkoutLog[]

  @@map("users")
}

model Session {
  id             String    @id
  expiresAt      DateTime
  token          String    @unique
  createdAt      DateTime
  updatedAt      DateTime? @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User      @relation(fields: [userId], references: [id])

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime? @updatedAt
  user                  User      @relation(fields: [userId], references: [id])

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime? @updatedAt

  @@map("verifications")
}

model UTImage {
  id                 String   @id @default(cuid())
  key                String   @unique
  userId             String
  createdAt          DateTime @default(now())
  usedAsAvatarByUser User?    @relation("AvatarImage")
  usedAsCoverByUser  User?    @relation("CoverImage")
  user               User     @relation("UploadedImages", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ut_images")
}

model TrainingPlan {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  userId          String
  experienceLevel ExperienceLevel
  goalTime        String?
  workoutDays     Json
  isActive        Boolean         @default(true)
  isCompleted     Boolean         @default(false)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutLogs     WorkoutLog[]
  workouts        Workout[]

  @@map("training_plans")
}

model Workout {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String
  description    String?
  type           WorkoutType
  week           Int
  day            Int
  distance       Float?
  duration       Int?
  pace           String?
  intervals      Json?
  isRaceDay      Boolean      @default(false)
  raceDetails    Json?
  trainingPlanId String
  workoutLogs    WorkoutLog[]
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)

  @@map("workouts")
}

model WorkoutLog {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  completedAt       DateTime
  notes             String?
  actualDistance    Float?
  actualDuration    Int?
  actualPace        String?
  userId            String
  workoutId         String?
  trainingPlanId    String?
  workoutIdentifier String?
  trainingPlan      TrainingPlan? @relation(fields: [trainingPlanId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout           Workout?      @relation(fields: [workoutId], references: [id])

  @@map("workout_logs")
}

model CrossTrainingActivity {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  type        CrossTrainingType
  name        String
  description String?
  duration    Int
  notes       String?
  completedAt DateTime
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cross_training_activities")
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum DistanceUnit {
  KILOMETERS
  MILES
}

enum PaceFormat {
  MIN_PER_KM
  MIN_PER_MILE
}

enum WorkoutType {
  TEMPO_RUN
  INTERVAL_800M
  LONG_RUN
  EASY_RUN
  RECOVERY_RUN
  MARATHON_RACE
}

enum CrossTrainingType {
  YOGA
  CYCLING
  STRENGTH_TRAINING
  SWIMMING
  PILATES
  OTHER
}
